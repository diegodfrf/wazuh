// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace test {
class Run;
struct RunDefaultTypeInternal;
extern RunDefaultTypeInternal _Run_default_instance_;
class RunPost_Request;
struct RunPost_RequestDefaultTypeInternal;
extern RunPost_RequestDefaultTypeInternal _RunPost_Request_default_instance_;
class RunPost_Response;
struct RunPost_ResponseDefaultTypeInternal;
extern RunPost_ResponseDefaultTypeInternal _RunPost_Response_default_instance_;
class Run_AssetTrace;
struct Run_AssetTraceDefaultTypeInternal;
extern Run_AssetTraceDefaultTypeInternal _Run_AssetTrace_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionGet_Request;
struct SessionGet_RequestDefaultTypeInternal;
extern SessionGet_RequestDefaultTypeInternal _SessionGet_Request_default_instance_;
class SessionGet_Response;
struct SessionGet_ResponseDefaultTypeInternal;
extern SessionGet_ResponseDefaultTypeInternal _SessionGet_Response_default_instance_;
class SessionPost_Request;
struct SessionPost_RequestDefaultTypeInternal;
extern SessionPost_RequestDefaultTypeInternal _SessionPost_Request_default_instance_;
class SessionPost_Response;
struct SessionPost_ResponseDefaultTypeInternal;
extern SessionPost_ResponseDefaultTypeInternal _SessionPost_Response_default_instance_;
class SessionsDelete_Request;
struct SessionsDelete_RequestDefaultTypeInternal;
extern SessionsDelete_RequestDefaultTypeInternal _SessionsDelete_Request_default_instance_;
class SessionsDelete_Response;
struct SessionsDelete_ResponseDefaultTypeInternal;
extern SessionsDelete_ResponseDefaultTypeInternal _SessionsDelete_Response_default_instance_;
class SessionsGet_Request;
struct SessionsGet_RequestDefaultTypeInternal;
extern SessionsGet_RequestDefaultTypeInternal _SessionsGet_Request_default_instance_;
class SessionsGet_Response;
struct SessionsGet_ResponseDefaultTypeInternal;
extern SessionsGet_ResponseDefaultTypeInternal _SessionsGet_Response_default_instance_;
}  // namespace test
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::test::Run* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::Run>(Arena*);
template<> ::com::wazuh::api::engine::test::RunPost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::RunPost_Request>(Arena*);
template<> ::com::wazuh::api::engine::test::RunPost_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::RunPost_Response>(Arena*);
template<> ::com::wazuh::api::engine::test::Run_AssetTrace* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::Run_AssetTrace>(Arena*);
template<> ::com::wazuh::api::engine::test::Session* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::Session>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionPost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionPost_Request>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionPost_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionPost_Response>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionsDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionsDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionsDelete_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionsDelete_Response>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionsGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionsGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::test::SessionsGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::SessionsGet_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace test {

enum DebugMode : int {
  OUTPUT_ONLY = 0,
  OUTPUT_AND_TRACES = 1,
  OUTPUT_AND_TRACES_WITH_DETAILS = 2,
  DebugMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DebugMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DebugMode_IsValid(int value);
constexpr DebugMode DebugMode_MIN = OUTPUT_ONLY;
constexpr DebugMode DebugMode_MAX = OUTPUT_AND_TRACES_WITH_DETAILS;
constexpr int DebugMode_ARRAYSIZE = DebugMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugMode_descriptor();
template<typename T>
inline const std::string& DebugMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DebugMode_descriptor(), enum_t_value);
}
inline bool DebugMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DebugMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugMode>(
    DebugMode_descriptor(), name, value);
}
// ===================================================================

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit PROTOBUF_CONSTEXPR Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Session& from) {
    Session::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 4,
    kFilterFieldNumber = 5,
    kRouteFieldNumber = 6,
    kDescriptionFieldNumber = 8,
    kIdFieldNumber = 2,
    kCreationDateFieldNumber = 3,
    kLifespanFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string policy = 4;
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // string filter = 5;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string route = 6;
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_NODISCARD std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // string description = 8;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 creation_date = 3;
  void clear_creation_date();
  uint32_t creation_date() const;
  void set_creation_date(uint32_t value);
  private:
  uint32_t _internal_creation_date() const;
  void _internal_set_creation_date(uint32_t value);
  public:

  // uint32 lifespan = 7;
  void clear_lifespan();
  uint32_t lifespan() const;
  void set_lifespan(uint32_t value);
  private:
  uint32_t _internal_lifespan() const;
  void _internal_set_lifespan(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t id_;
    uint32_t creation_date_;
    uint32_t lifespan_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Run_AssetTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.Run.AssetTrace) */ {
 public:
  inline Run_AssetTrace() : Run_AssetTrace(nullptr) {}
  ~Run_AssetTrace() override;
  explicit PROTOBUF_CONSTEXPR Run_AssetTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Run_AssetTrace(const Run_AssetTrace& from);
  Run_AssetTrace(Run_AssetTrace&& from) noexcept
    : Run_AssetTrace() {
    *this = ::std::move(from);
  }

  inline Run_AssetTrace& operator=(const Run_AssetTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Run_AssetTrace& operator=(Run_AssetTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Run_AssetTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Run_AssetTrace* internal_default_instance() {
    return reinterpret_cast<const Run_AssetTrace*>(
               &_Run_AssetTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Run_AssetTrace& a, Run_AssetTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(Run_AssetTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Run_AssetTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Run_AssetTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Run_AssetTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Run_AssetTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Run_AssetTrace& from) {
    Run_AssetTrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Run_AssetTrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.Run.AssetTrace";
  }
  protected:
  explicit Run_AssetTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracesFieldNumber = 3,
    kAssetFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated string traces = 3;
  int traces_size() const;
  private:
  int _internal_traces_size() const;
  public:
  void clear_traces();
  const std::string& traces(int index) const;
  std::string* mutable_traces(int index);
  void set_traces(int index, const std::string& value);
  void set_traces(int index, std::string&& value);
  void set_traces(int index, const char* value);
  void set_traces(int index, const char* value, size_t size);
  std::string* add_traces();
  void add_traces(const std::string& value);
  void add_traces(std::string&& value);
  void add_traces(const char* value);
  void add_traces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& traces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_traces();
  private:
  const std::string& _internal_traces(int index) const;
  std::string* _internal_add_traces();
  public:

  // string asset = 1;
  void clear_asset();
  const std::string& asset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset();
  PROTOBUF_NODISCARD std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.Run.AssetTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> traces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Run final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.Run) */ {
 public:
  inline Run() : Run(nullptr) {}
  ~Run() override;
  explicit PROTOBUF_CONSTEXPR Run(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Run(const Run& from);
  Run(Run&& from) noexcept
    : Run() {
    *this = ::std::move(from);
  }

  inline Run& operator=(const Run& from) {
    CopyFrom(from);
    return *this;
  }
  inline Run& operator=(Run&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Run& default_instance() {
    return *internal_default_instance();
  }
  static inline const Run* internal_default_instance() {
    return reinterpret_cast<const Run*>(
               &_Run_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Run& a, Run& b) {
    a.Swap(&b);
  }
  inline void Swap(Run* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Run* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Run* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Run>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Run& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Run& from) {
    Run::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Run* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.Run";
  }
  protected:
  explicit Run(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Run_AssetTrace AssetTrace;

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTracesFieldNumber = 2,
    kOutputFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.test.Run.AssetTrace asset_traces = 2;
  int asset_traces_size() const;
  private:
  int _internal_asset_traces_size() const;
  public:
  void clear_asset_traces();
  ::com::wazuh::api::engine::test::Run_AssetTrace* mutable_asset_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::test::Run_AssetTrace >*
      mutable_asset_traces();
  private:
  const ::com::wazuh::api::engine::test::Run_AssetTrace& _internal_asset_traces(int index) const;
  ::com::wazuh::api::engine::test::Run_AssetTrace* _internal_add_asset_traces();
  public:
  const ::com::wazuh::api::engine::test::Run_AssetTrace& asset_traces(int index) const;
  ::com::wazuh::api::engine::test::Run_AssetTrace* add_asset_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::test::Run_AssetTrace >&
      asset_traces() const;

  // .google.protobuf.Value output = 1;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::PROTOBUF_NAMESPACE_ID::Value& output() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_output();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_output();
  void set_allocated_output(::PROTOBUF_NAMESPACE_ID::Value* output);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_output() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::PROTOBUF_NAMESPACE_ID::Value* output);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.Run)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::test::Run_AssetTrace > asset_traces_;
    ::PROTOBUF_NAMESPACE_ID::Value* output_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionGet_Request) */ {
 public:
  inline SessionGet_Request() : SessionGet_Request(nullptr) {}
  ~SessionGet_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionGet_Request(const SessionGet_Request& from);
  SessionGet_Request(SessionGet_Request&& from) noexcept
    : SessionGet_Request() {
    *this = ::std::move(from);
  }

  inline SessionGet_Request& operator=(const SessionGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionGet_Request& operator=(SessionGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionGet_Request* internal_default_instance() {
    return reinterpret_cast<const SessionGet_Request*>(
               &_SessionGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionGet_Request& a, SessionGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionGet_Request& from) {
    SessionGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionGet_Request";
  }
  protected:
  explicit SessionGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionGet_Response) */ {
 public:
  inline SessionGet_Response() : SessionGet_Response(nullptr) {}
  ~SessionGet_Response() override;
  explicit PROTOBUF_CONSTEXPR SessionGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionGet_Response(const SessionGet_Response& from);
  SessionGet_Response(SessionGet_Response&& from) noexcept
    : SessionGet_Response() {
    *this = ::std::move(from);
  }

  inline SessionGet_Response& operator=(const SessionGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionGet_Response& operator=(SessionGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionGet_Response* internal_default_instance() {
    return reinterpret_cast<const SessionGet_Response*>(
               &_SessionGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SessionGet_Response& a, SessionGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionGet_Response& from) {
    SessionGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionGet_Response";
  }
  protected:
  explicit SessionGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSessionFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.test.Session session = 3;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::com::wazuh::api::engine::test::Session& session() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::test::Session* release_session();
  ::com::wazuh::api::engine::test::Session* mutable_session();
  void set_allocated_session(::com::wazuh::api::engine::test::Session* session);
  private:
  const ::com::wazuh::api::engine::test::Session& _internal_session() const;
  ::com::wazuh::api::engine::test::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::com::wazuh::api::engine::test::Session* session);
  ::com::wazuh::api::engine::test::Session* unsafe_arena_release_session();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::test::Session* session_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionPost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionPost_Request) */ {
 public:
  inline SessionPost_Request() : SessionPost_Request(nullptr) {}
  ~SessionPost_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionPost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionPost_Request(const SessionPost_Request& from);
  SessionPost_Request(SessionPost_Request&& from) noexcept
    : SessionPost_Request() {
    *this = ::std::move(from);
  }

  inline SessionPost_Request& operator=(const SessionPost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPost_Request& operator=(SessionPost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionPost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionPost_Request* internal_default_instance() {
    return reinterpret_cast<const SessionPost_Request*>(
               &_SessionPost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SessionPost_Request& a, SessionPost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionPost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionPost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionPost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionPost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionPost_Request& from) {
    SessionPost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionPost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionPost_Request";
  }
  protected:
  explicit SessionPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kLifespanFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string policy = 2;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint32 lifespan = 3;
  bool has_lifespan() const;
  private:
  bool _internal_has_lifespan() const;
  public:
  void clear_lifespan();
  uint32_t lifespan() const;
  void set_lifespan(uint32_t value);
  private:
  uint32_t _internal_lifespan() const;
  void _internal_set_lifespan(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionPost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t lifespan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionPost_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionPost_Response) */ {
 public:
  inline SessionPost_Response() : SessionPost_Response(nullptr) {}
  ~SessionPost_Response() override;
  explicit PROTOBUF_CONSTEXPR SessionPost_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionPost_Response(const SessionPost_Response& from);
  SessionPost_Response(SessionPost_Response&& from) noexcept
    : SessionPost_Response() {
    *this = ::std::move(from);
  }

  inline SessionPost_Response& operator=(const SessionPost_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPost_Response& operator=(SessionPost_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionPost_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionPost_Response* internal_default_instance() {
    return reinterpret_cast<const SessionPost_Response*>(
               &_SessionPost_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SessionPost_Response& a, SessionPost_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPost_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionPost_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionPost_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionPost_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionPost_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionPost_Response& from) {
    SessionPost_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionPost_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionPost_Response";
  }
  protected:
  explicit SessionPost_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional string error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionPost_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionsGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionsGet_Request) */ {
 public:
  inline SessionsGet_Request() : SessionsGet_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SessionsGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionsGet_Request(const SessionsGet_Request& from);
  SessionsGet_Request(SessionsGet_Request&& from) noexcept
    : SessionsGet_Request() {
    *this = ::std::move(from);
  }

  inline SessionsGet_Request& operator=(const SessionsGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionsGet_Request& operator=(SessionsGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionsGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionsGet_Request* internal_default_instance() {
    return reinterpret_cast<const SessionsGet_Request*>(
               &_SessionsGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SessionsGet_Request& a, SessionsGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionsGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionsGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionsGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionsGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SessionsGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SessionsGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionsGet_Request";
  }
  protected:
  explicit SessionsGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionsGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionsGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionsGet_Response) */ {
 public:
  inline SessionsGet_Response() : SessionsGet_Response(nullptr) {}
  ~SessionsGet_Response() override;
  explicit PROTOBUF_CONSTEXPR SessionsGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionsGet_Response(const SessionsGet_Response& from);
  SessionsGet_Response(SessionsGet_Response&& from) noexcept
    : SessionsGet_Response() {
    *this = ::std::move(from);
  }

  inline SessionsGet_Response& operator=(const SessionsGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionsGet_Response& operator=(SessionsGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionsGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionsGet_Response* internal_default_instance() {
    return reinterpret_cast<const SessionsGet_Response*>(
               &_SessionsGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SessionsGet_Response& a, SessionsGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionsGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionsGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionsGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionsGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionsGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionsGet_Response& from) {
    SessionsGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionsGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionsGet_Response";
  }
  protected:
  explicit SessionsGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();
  private:
  const std::string& _internal_list(int index) const;
  std::string* _internal_add_list();
  public:

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionsGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionsDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionsDelete_Request) */ {
 public:
  inline SessionsDelete_Request() : SessionsDelete_Request(nullptr) {}
  ~SessionsDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionsDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionsDelete_Request(const SessionsDelete_Request& from);
  SessionsDelete_Request(SessionsDelete_Request&& from) noexcept
    : SessionsDelete_Request() {
    *this = ::std::move(from);
  }

  inline SessionsDelete_Request& operator=(const SessionsDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionsDelete_Request& operator=(SessionsDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionsDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionsDelete_Request* internal_default_instance() {
    return reinterpret_cast<const SessionsDelete_Request*>(
               &_SessionsDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SessionsDelete_Request& a, SessionsDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionsDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionsDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionsDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionsDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionsDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionsDelete_Request& from) {
    SessionsDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionsDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionsDelete_Request";
  }
  protected:
  explicit SessionsDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDeleteAllFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool delete_all = 2;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionsDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool delete_all_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SessionsDelete_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.SessionsDelete_Response) */ {
 public:
  inline SessionsDelete_Response() : SessionsDelete_Response(nullptr) {}
  ~SessionsDelete_Response() override;
  explicit PROTOBUF_CONSTEXPR SessionsDelete_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionsDelete_Response(const SessionsDelete_Response& from);
  SessionsDelete_Response(SessionsDelete_Response&& from) noexcept
    : SessionsDelete_Response() {
    *this = ::std::move(from);
  }

  inline SessionsDelete_Response& operator=(const SessionsDelete_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionsDelete_Response& operator=(SessionsDelete_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionsDelete_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionsDelete_Response* internal_default_instance() {
    return reinterpret_cast<const SessionsDelete_Response*>(
               &_SessionsDelete_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SessionsDelete_Response& a, SessionsDelete_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionsDelete_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionsDelete_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionsDelete_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionsDelete_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionsDelete_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionsDelete_Response& from) {
    SessionsDelete_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionsDelete_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.SessionsDelete_Response";
  }
  protected:
  explicit SessionsDelete_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional string error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.SessionsDelete_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class RunPost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.RunPost_Request) */ {
 public:
  inline RunPost_Request() : RunPost_Request(nullptr) {}
  ~RunPost_Request() override;
  explicit PROTOBUF_CONSTEXPR RunPost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunPost_Request(const RunPost_Request& from);
  RunPost_Request(RunPost_Request&& from) noexcept
    : RunPost_Request() {
    *this = ::std::move(from);
  }

  inline RunPost_Request& operator=(const RunPost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunPost_Request& operator=(RunPost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunPost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunPost_Request* internal_default_instance() {
    return reinterpret_cast<const RunPost_Request*>(
               &_RunPost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RunPost_Request& a, RunPost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RunPost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunPost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunPost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunPost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunPost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunPost_Request& from) {
    RunPost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunPost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.RunPost_Request";
  }
  protected:
  explicit RunPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTraceFieldNumber = 5,
    kNamespacesFieldNumber = 7,
    kNameFieldNumber = 1,
    kProtocolQueueFieldNumber = 3,
    kProtocolLocationFieldNumber = 6,
    kEventFieldNumber = 2,
    kDebugModeFieldNumber = 4,
  };
  // repeated string asset_trace = 5;
  int asset_trace_size() const;
  private:
  int _internal_asset_trace_size() const;
  public:
  void clear_asset_trace();
  const std::string& asset_trace(int index) const;
  std::string* mutable_asset_trace(int index);
  void set_asset_trace(int index, const std::string& value);
  void set_asset_trace(int index, std::string&& value);
  void set_asset_trace(int index, const char* value);
  void set_asset_trace(int index, const char* value, size_t size);
  std::string* add_asset_trace();
  void add_asset_trace(const std::string& value);
  void add_asset_trace(std::string&& value);
  void add_asset_trace(const char* value);
  void add_asset_trace(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& asset_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_asset_trace();
  private:
  const std::string& _internal_asset_trace(int index) const;
  std::string* _internal_add_asset_trace();
  public:

  // repeated string namespaces = 7;
  int namespaces_size() const;
  private:
  int _internal_namespaces_size() const;
  public:
  void clear_namespaces();
  const std::string& namespaces(int index) const;
  std::string* mutable_namespaces(int index);
  void set_namespaces(int index, const std::string& value);
  void set_namespaces(int index, std::string&& value);
  void set_namespaces(int index, const char* value);
  void set_namespaces(int index, const char* value, size_t size);
  std::string* add_namespaces();
  void add_namespaces(const std::string& value);
  void add_namespaces(std::string&& value);
  void add_namespaces(const char* value);
  void add_namespaces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& namespaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_namespaces();
  private:
  const std::string& _internal_namespaces(int index) const;
  std::string* _internal_add_namespaces();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string protocol_queue = 3;
  bool has_protocol_queue() const;
  private:
  bool _internal_has_protocol_queue() const;
  public:
  void clear_protocol_queue();
  const std::string& protocol_queue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol_queue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol_queue();
  PROTOBUF_NODISCARD std::string* release_protocol_queue();
  void set_allocated_protocol_queue(std::string* protocol_queue);
  private:
  const std::string& _internal_protocol_queue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_queue(const std::string& value);
  std::string* _internal_mutable_protocol_queue();
  public:

  // optional string protocol_location = 6;
  bool has_protocol_location() const;
  private:
  bool _internal_has_protocol_location() const;
  public:
  void clear_protocol_location();
  const std::string& protocol_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol_location();
  PROTOBUF_NODISCARD std::string* release_protocol_location();
  void set_allocated_protocol_location(std::string* protocol_location);
  private:
  const std::string& _internal_protocol_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_location(const std::string& value);
  std::string* _internal_mutable_protocol_location();
  public:

  // optional .google.protobuf.Value event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::PROTOBUF_NAMESPACE_ID::Value& event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_event();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_event();
  void set_allocated_event(::PROTOBUF_NAMESPACE_ID::Value* event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_event() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::PROTOBUF_NAMESPACE_ID::Value* event);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_event();

  // optional .com.wazuh.api.engine.test.DebugMode debug_mode = 4;
  bool has_debug_mode() const;
  private:
  bool _internal_has_debug_mode() const;
  public:
  void clear_debug_mode();
  ::com::wazuh::api::engine::test::DebugMode debug_mode() const;
  void set_debug_mode(::com::wazuh::api::engine::test::DebugMode value);
  private:
  ::com::wazuh::api::engine::test::DebugMode _internal_debug_mode() const;
  void _internal_set_debug_mode(::com::wazuh::api::engine::test::DebugMode value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.RunPost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> asset_trace_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> namespaces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_queue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_location_;
    ::PROTOBUF_NAMESPACE_ID::Value* event_;
    int debug_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class RunPost_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.RunPost_Response) */ {
 public:
  inline RunPost_Response() : RunPost_Response(nullptr) {}
  ~RunPost_Response() override;
  explicit PROTOBUF_CONSTEXPR RunPost_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunPost_Response(const RunPost_Response& from);
  RunPost_Response(RunPost_Response&& from) noexcept
    : RunPost_Response() {
    *this = ::std::move(from);
  }

  inline RunPost_Response& operator=(const RunPost_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunPost_Response& operator=(RunPost_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunPost_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunPost_Response* internal_default_instance() {
    return reinterpret_cast<const RunPost_Response*>(
               &_RunPost_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RunPost_Response& a, RunPost_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RunPost_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunPost_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunPost_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunPost_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunPost_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunPost_Response& from) {
    RunPost_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunPost_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.RunPost_Response";
  }
  protected:
  explicit RunPost_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kRunFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.test.Run run = 3;
  bool has_run() const;
  private:
  bool _internal_has_run() const;
  public:
  void clear_run();
  const ::com::wazuh::api::engine::test::Run& run() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::test::Run* release_run();
  ::com::wazuh::api::engine::test::Run* mutable_run();
  void set_allocated_run(::com::wazuh::api::engine::test::Run* run);
  private:
  const ::com::wazuh::api::engine::test::Run& _internal_run() const;
  ::com::wazuh::api::engine::test::Run* _internal_mutable_run();
  public:
  void unsafe_arena_set_allocated_run(
      ::com::wazuh::api::engine::test::Run* run);
  ::com::wazuh::api::engine::test::Run* unsafe_arena_release_run();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.RunPost_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::test::Run* run_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// string name = 1;
inline void Session::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Session::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.name)
}
inline std::string* Session::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Session.name)
  return _s;
}
inline const std::string& Session::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Session::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Session.name)
  return _impl_.name_.Release();
}
inline void Session::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Session.name)
}

// uint32 id = 2;
inline void Session::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Session::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Session::id() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.id)
  return _internal_id();
}
inline void Session::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Session::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.id)
}

// uint32 creation_date = 3;
inline void Session::clear_creation_date() {
  _impl_.creation_date_ = 0u;
}
inline uint32_t Session::_internal_creation_date() const {
  return _impl_.creation_date_;
}
inline uint32_t Session::creation_date() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.creation_date)
  return _internal_creation_date();
}
inline void Session::_internal_set_creation_date(uint32_t value) {
  
  _impl_.creation_date_ = value;
}
inline void Session::set_creation_date(uint32_t value) {
  _internal_set_creation_date(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.creation_date)
}

// string policy = 4;
inline void Session::clear_policy() {
  _impl_.policy_.ClearToEmpty();
}
inline const std::string& Session::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.policy)
}
inline std::string* Session::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Session.policy)
  return _s;
}
inline const std::string& Session::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void Session::_internal_set_policy(const std::string& value) {
  
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_policy() {
  
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Session.policy)
  return _impl_.policy_.Release();
}
inline void Session::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    
  } else {
    
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Session.policy)
}

// string filter = 5;
inline void Session::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& Session::filter() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.filter)
}
inline std::string* Session::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Session.filter)
  return _s;
}
inline const std::string& Session::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void Session::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_filter() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Session.filter)
  return _impl_.filter_.Release();
}
inline void Session::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Session.filter)
}

// string route = 6;
inline void Session::clear_route() {
  _impl_.route_.ClearToEmpty();
}
inline const std::string& Session::route() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_route(ArgT0&& arg0, ArgT... args) {
 
 _impl_.route_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.route)
}
inline std::string* Session::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Session.route)
  return _s;
}
inline const std::string& Session::_internal_route() const {
  return _impl_.route_.Get();
}
inline void Session::_internal_set_route(const std::string& value) {
  
  _impl_.route_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_route() {
  
  return _impl_.route_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_route() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Session.route)
  return _impl_.route_.Release();
}
inline void Session::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  _impl_.route_.SetAllocated(route, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_.IsDefault()) {
    _impl_.route_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Session.route)
}

// uint32 lifespan = 7;
inline void Session::clear_lifespan() {
  _impl_.lifespan_ = 0u;
}
inline uint32_t Session::_internal_lifespan() const {
  return _impl_.lifespan_;
}
inline uint32_t Session::lifespan() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.lifespan)
  return _internal_lifespan();
}
inline void Session::_internal_set_lifespan(uint32_t value) {
  
  _impl_.lifespan_ = value;
}
inline void Session::set_lifespan(uint32_t value) {
  _internal_set_lifespan(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.lifespan)
}

// string description = 8;
inline void Session::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Session::description() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Session.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Session.description)
}
inline std::string* Session::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Session.description)
  return _s;
}
inline const std::string& Session::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Session::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_description() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Session.description)
  return _impl_.description_.Release();
}
inline void Session::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Session.description)
}

// -------------------------------------------------------------------

// Run_AssetTrace

// string asset = 1;
inline void Run_AssetTrace::clear_asset() {
  _impl_.asset_.ClearToEmpty();
}
inline const std::string& Run_AssetTrace::asset() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run.AssetTrace.asset)
  return _internal_asset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Run_AssetTrace::set_asset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run.AssetTrace.asset)
}
inline std::string* Run_AssetTrace::mutable_asset() {
  std::string* _s = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run.AssetTrace.asset)
  return _s;
}
inline const std::string& Run_AssetTrace::_internal_asset() const {
  return _impl_.asset_.Get();
}
inline void Run_AssetTrace::_internal_set_asset(const std::string& value) {
  
  _impl_.asset_.Set(value, GetArenaForAllocation());
}
inline std::string* Run_AssetTrace::_internal_mutable_asset() {
  
  return _impl_.asset_.Mutable(GetArenaForAllocation());
}
inline std::string* Run_AssetTrace::release_asset() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run.AssetTrace.asset)
  return _impl_.asset_.Release();
}
inline void Run_AssetTrace::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {
    
  } else {
    
  }
  _impl_.asset_.SetAllocated(asset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_.IsDefault()) {
    _impl_.asset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run.AssetTrace.asset)
}

// bool success = 2;
inline void Run_AssetTrace::clear_success() {
  _impl_.success_ = false;
}
inline bool Run_AssetTrace::_internal_success() const {
  return _impl_.success_;
}
inline bool Run_AssetTrace::success() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run.AssetTrace.success)
  return _internal_success();
}
inline void Run_AssetTrace::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void Run_AssetTrace::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run.AssetTrace.success)
}

// repeated string traces = 3;
inline int Run_AssetTrace::_internal_traces_size() const {
  return _impl_.traces_.size();
}
inline int Run_AssetTrace::traces_size() const {
  return _internal_traces_size();
}
inline void Run_AssetTrace::clear_traces() {
  _impl_.traces_.Clear();
}
inline std::string* Run_AssetTrace::add_traces() {
  std::string* _s = _internal_add_traces();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.test.Run.AssetTrace.traces)
  return _s;
}
inline const std::string& Run_AssetTrace::_internal_traces(int index) const {
  return _impl_.traces_.Get(index);
}
inline const std::string& Run_AssetTrace::traces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run.AssetTrace.traces)
  return _internal_traces(index);
}
inline std::string* Run_AssetTrace::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run.AssetTrace.traces)
  return _impl_.traces_.Mutable(index);
}
inline void Run_AssetTrace::set_traces(int index, const std::string& value) {
  _impl_.traces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline void Run_AssetTrace::set_traces(int index, std::string&& value) {
  _impl_.traces_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline void Run_AssetTrace::set_traces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.traces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline void Run_AssetTrace::set_traces(int index, const char* value, size_t size) {
  _impl_.traces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline std::string* Run_AssetTrace::_internal_add_traces() {
  return _impl_.traces_.Add();
}
inline void Run_AssetTrace::add_traces(const std::string& value) {
  _impl_.traces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline void Run_AssetTrace::add_traces(std::string&& value) {
  _impl_.traces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline void Run_AssetTrace::add_traces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.traces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline void Run_AssetTrace::add_traces(const char* value, size_t size) {
  _impl_.traces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.test.Run.AssetTrace.traces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Run_AssetTrace::traces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.test.Run.AssetTrace.traces)
  return _impl_.traces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Run_AssetTrace::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.test.Run.AssetTrace.traces)
  return &_impl_.traces_;
}

// -------------------------------------------------------------------

// Run

// .google.protobuf.Value output = 1;
inline bool Run::_internal_has_output() const {
  return this != internal_default_instance() && _impl_.output_ != nullptr;
}
inline bool Run::has_output() const {
  return _internal_has_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run::_internal_output() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.output_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run::output() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run.output)
  return _internal_output();
}
inline void Run::unsafe_arena_set_allocated_output(
    ::PROTOBUF_NAMESPACE_ID::Value* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_);
  }
  _impl_.output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.Run.output)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run::release_output() {
  
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.output_;
  _impl_.output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run.output)
  
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.output_;
  _impl_.output_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run::_internal_mutable_output() {
  
  if (_impl_.output_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.output_ = p;
  }
  return _impl_.output_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run::mutable_output() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run.output)
  return _msg;
}
inline void Run::set_allocated_output(::PROTOBUF_NAMESPACE_ID::Value* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output));
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.output_ = output;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run.output)
}

// repeated .com.wazuh.api.engine.test.Run.AssetTrace asset_traces = 2;
inline int Run::_internal_asset_traces_size() const {
  return _impl_.asset_traces_.size();
}
inline int Run::asset_traces_size() const {
  return _internal_asset_traces_size();
}
inline void Run::clear_asset_traces() {
  _impl_.asset_traces_.Clear();
}
inline ::com::wazuh::api::engine::test::Run_AssetTrace* Run::mutable_asset_traces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run.asset_traces)
  return _impl_.asset_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::test::Run_AssetTrace >*
Run::mutable_asset_traces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.test.Run.asset_traces)
  return &_impl_.asset_traces_;
}
inline const ::com::wazuh::api::engine::test::Run_AssetTrace& Run::_internal_asset_traces(int index) const {
  return _impl_.asset_traces_.Get(index);
}
inline const ::com::wazuh::api::engine::test::Run_AssetTrace& Run::asset_traces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run.asset_traces)
  return _internal_asset_traces(index);
}
inline ::com::wazuh::api::engine::test::Run_AssetTrace* Run::_internal_add_asset_traces() {
  return _impl_.asset_traces_.Add();
}
inline ::com::wazuh::api::engine::test::Run_AssetTrace* Run::add_asset_traces() {
  ::com::wazuh::api::engine::test::Run_AssetTrace* _add = _internal_add_asset_traces();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.Run.asset_traces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::test::Run_AssetTrace >&
Run::asset_traces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.test.Run.asset_traces)
  return _impl_.asset_traces_;
}

// -------------------------------------------------------------------

// SessionGet_Request

// optional string name = 1;
inline bool SessionGet_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionGet_Request::has_name() const {
  return _internal_has_name();
}
inline void SessionGet_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionGet_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionGet_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionGet_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionGet_Request.name)
}
inline std::string* SessionGet_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionGet_Request.name)
  return _s;
}
inline const std::string& SessionGet_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionGet_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionGet_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionGet_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionGet_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionGet_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionGet_Request.name)
}

// -------------------------------------------------------------------

// SessionGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void SessionGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus SessionGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus SessionGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionGet_Response.status)
  return _internal_status();
}
inline void SessionGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void SessionGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionGet_Response.status)
}

// optional string error = 2;
inline bool SessionGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionGet_Response::has_error() const {
  return _internal_has_error();
}
inline void SessionGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionGet_Response.error)
}
inline std::string* SessionGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionGet_Response.error)
  return _s;
}
inline const std::string& SessionGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SessionGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionGet_Response.error)
}

// optional .com.wazuh.api.engine.test.Session session = 3;
inline bool SessionGet_Response::_internal_has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline bool SessionGet_Response::has_session() const {
  return _internal_has_session();
}
inline void SessionGet_Response::clear_session() {
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::test::Session& SessionGet_Response::_internal_session() const {
  const ::com::wazuh::api::engine::test::Session* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::test::Session&>(
      ::com::wazuh::api::engine::test::_Session_default_instance_);
}
inline const ::com::wazuh::api::engine::test::Session& SessionGet_Response::session() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionGet_Response.session)
  return _internal_session();
}
inline void SessionGet_Response::unsafe_arena_set_allocated_session(
    ::com::wazuh::api::engine::test::Session* session) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = session;
  if (session) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.SessionGet_Response.session)
}
inline ::com::wazuh::api::engine::test::Session* SessionGet_Response::release_session() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::test::Session* temp = _impl_.session_;
  _impl_.session_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::test::Session* SessionGet_Response::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionGet_Response.session)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::test::Session* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::test::Session* SessionGet_Response::_internal_mutable_session() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.session_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::test::Session>(GetArenaForAllocation());
    _impl_.session_ = p;
  }
  return _impl_.session_;
}
inline ::com::wazuh::api::engine::test::Session* SessionGet_Response::mutable_session() {
  ::com::wazuh::api::engine::test::Session* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionGet_Response.session)
  return _msg;
}
inline void SessionGet_Response::set_allocated_session(::com::wazuh::api::engine::test::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.session_ = session;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionGet_Response.session)
}

// -------------------------------------------------------------------

// SessionPost_Request

// optional string name = 1;
inline bool SessionPost_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionPost_Request::has_name() const {
  return _internal_has_name();
}
inline void SessionPost_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionPost_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionPost_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionPost_Request.name)
}
inline std::string* SessionPost_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionPost_Request.name)
  return _s;
}
inline const std::string& SessionPost_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionPost_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionPost_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionPost_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionPost_Request.name)
}

// optional string policy = 2;
inline bool SessionPost_Request::_internal_has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SessionPost_Request::has_policy() const {
  return _internal_has_policy();
}
inline void SessionPost_Request::clear_policy() {
  _impl_.policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SessionPost_Request::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionPost_Request.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost_Request::set_policy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionPost_Request.policy)
}
inline std::string* SessionPost_Request::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionPost_Request.policy)
  return _s;
}
inline const std::string& SessionPost_Request::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void SessionPost_Request::_internal_set_policy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost_Request::_internal_mutable_policy() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost_Request::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionPost_Request.policy)
  if (!_internal_has_policy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.policy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionPost_Request::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionPost_Request.policy)
}

// optional uint32 lifespan = 3;
inline bool SessionPost_Request::_internal_has_lifespan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SessionPost_Request::has_lifespan() const {
  return _internal_has_lifespan();
}
inline void SessionPost_Request::clear_lifespan() {
  _impl_.lifespan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t SessionPost_Request::_internal_lifespan() const {
  return _impl_.lifespan_;
}
inline uint32_t SessionPost_Request::lifespan() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionPost_Request.lifespan)
  return _internal_lifespan();
}
inline void SessionPost_Request::_internal_set_lifespan(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lifespan_ = value;
}
inline void SessionPost_Request::set_lifespan(uint32_t value) {
  _internal_set_lifespan(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionPost_Request.lifespan)
}

// optional string description = 4;
inline bool SessionPost_Request::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SessionPost_Request::has_description() const {
  return _internal_has_description();
}
inline void SessionPost_Request::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SessionPost_Request::description() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionPost_Request.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost_Request::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionPost_Request.description)
}
inline std::string* SessionPost_Request::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionPost_Request.description)
  return _s;
}
inline const std::string& SessionPost_Request::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SessionPost_Request::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost_Request::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost_Request::release_description() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionPost_Request.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionPost_Request::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionPost_Request.description)
}

// -------------------------------------------------------------------

// SessionPost_Response

// optional string error = 1;
inline bool SessionPost_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionPost_Response::has_error() const {
  return _internal_has_error();
}
inline void SessionPost_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionPost_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionPost_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionPost_Response.error)
}
inline std::string* SessionPost_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionPost_Response.error)
  return _s;
}
inline const std::string& SessionPost_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SessionPost_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionPost_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionPost_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionPost_Response.error)
}

// -------------------------------------------------------------------

// SessionsGet_Request

// -------------------------------------------------------------------

// SessionsGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void SessionsGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus SessionsGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus SessionsGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionsGet_Response.status)
  return _internal_status();
}
inline void SessionsGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void SessionsGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsGet_Response.status)
}

// optional string error = 2;
inline bool SessionsGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionsGet_Response::has_error() const {
  return _internal_has_error();
}
inline void SessionsGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionsGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionsGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionsGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsGet_Response.error)
}
inline std::string* SessionsGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionsGet_Response.error)
  return _s;
}
inline const std::string& SessionsGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SessionsGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionsGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionsGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionsGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionsGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionsGet_Response.error)
}

// repeated string list = 3;
inline int SessionsGet_Response::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int SessionsGet_Response::list_size() const {
  return _internal_list_size();
}
inline void SessionsGet_Response::clear_list() {
  _impl_.list_.Clear();
}
inline std::string* SessionsGet_Response::add_list() {
  std::string* _s = _internal_add_list();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.test.SessionsGet_Response.list)
  return _s;
}
inline const std::string& SessionsGet_Response::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const std::string& SessionsGet_Response::list(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionsGet_Response.list)
  return _internal_list(index);
}
inline std::string* SessionsGet_Response::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionsGet_Response.list)
  return _impl_.list_.Mutable(index);
}
inline void SessionsGet_Response::set_list(int index, const std::string& value) {
  _impl_.list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline void SessionsGet_Response::set_list(int index, std::string&& value) {
  _impl_.list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline void SessionsGet_Response::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline void SessionsGet_Response::set_list(int index, const char* value, size_t size) {
  _impl_.list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline std::string* SessionsGet_Response::_internal_add_list() {
  return _impl_.list_.Add();
}
inline void SessionsGet_Response::add_list(const std::string& value) {
  _impl_.list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline void SessionsGet_Response::add_list(std::string&& value) {
  _impl_.list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline void SessionsGet_Response::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline void SessionsGet_Response::add_list(const char* value, size_t size) {
  _impl_.list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.test.SessionsGet_Response.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionsGet_Response::list() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.test.SessionsGet_Response.list)
  return _impl_.list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionsGet_Response::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.test.SessionsGet_Response.list)
  return &_impl_.list_;
}

// -------------------------------------------------------------------

// SessionsDelete_Request

// optional string name = 1;
inline bool SessionsDelete_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionsDelete_Request::has_name() const {
  return _internal_has_name();
}
inline void SessionsDelete_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionsDelete_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionsDelete_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionsDelete_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsDelete_Request.name)
}
inline std::string* SessionsDelete_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionsDelete_Request.name)
  return _s;
}
inline const std::string& SessionsDelete_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionsDelete_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionsDelete_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionsDelete_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionsDelete_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionsDelete_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionsDelete_Request.name)
}

// bool delete_all = 2;
inline void SessionsDelete_Request::clear_delete_all() {
  _impl_.delete_all_ = false;
}
inline bool SessionsDelete_Request::_internal_delete_all() const {
  return _impl_.delete_all_;
}
inline bool SessionsDelete_Request::delete_all() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionsDelete_Request.delete_all)
  return _internal_delete_all();
}
inline void SessionsDelete_Request::_internal_set_delete_all(bool value) {
  
  _impl_.delete_all_ = value;
}
inline void SessionsDelete_Request::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsDelete_Request.delete_all)
}

// -------------------------------------------------------------------

// SessionsDelete_Response

// optional string error = 1;
inline bool SessionsDelete_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionsDelete_Response::has_error() const {
  return _internal_has_error();
}
inline void SessionsDelete_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionsDelete_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.SessionsDelete_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionsDelete_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.SessionsDelete_Response.error)
}
inline std::string* SessionsDelete_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.SessionsDelete_Response.error)
  return _s;
}
inline const std::string& SessionsDelete_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SessionsDelete_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionsDelete_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionsDelete_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.SessionsDelete_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionsDelete_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.SessionsDelete_Response.error)
}

// -------------------------------------------------------------------

// RunPost_Request

// optional string name = 1;
inline bool RunPost_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RunPost_Request::has_name() const {
  return _internal_has_name();
}
inline void RunPost_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RunPost_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.name)
}
inline std::string* RunPost_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Request.name)
  return _s;
}
inline const std::string& RunPost_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RunPost_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.RunPost_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunPost_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.RunPost_Request.name)
}

// optional .google.protobuf.Value event = 2;
inline bool RunPost_Request::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_ != nullptr);
  return value;
}
inline bool RunPost_Request::has_event() const {
  return _internal_has_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& RunPost_Request::_internal_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& RunPost_Request::event() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.event)
  return _internal_event();
}
inline void RunPost_Request::unsafe_arena_set_allocated_event(
    ::PROTOBUF_NAMESPACE_ID::Value* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_);
  }
  _impl_.event_ = event;
  if (event) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.RunPost_Request.event)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* RunPost_Request::release_event() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.event_;
  _impl_.event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* RunPost_Request::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.RunPost_Request.event)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.event_;
  _impl_.event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* RunPost_Request::_internal_mutable_event() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.event_ = p;
  }
  return _impl_.event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* RunPost_Request::mutable_event() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Request.event)
  return _msg;
}
inline void RunPost_Request::set_allocated_event(::PROTOBUF_NAMESPACE_ID::Value* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.event_ = event;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.RunPost_Request.event)
}

// optional string protocol_queue = 3;
inline bool RunPost_Request::_internal_has_protocol_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RunPost_Request::has_protocol_queue() const {
  return _internal_has_protocol_queue();
}
inline void RunPost_Request::clear_protocol_queue() {
  _impl_.protocol_queue_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RunPost_Request::protocol_queue() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.protocol_queue)
  return _internal_protocol_queue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_protocol_queue(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.protocol_queue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.protocol_queue)
}
inline std::string* RunPost_Request::mutable_protocol_queue() {
  std::string* _s = _internal_mutable_protocol_queue();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Request.protocol_queue)
  return _s;
}
inline const std::string& RunPost_Request::_internal_protocol_queue() const {
  return _impl_.protocol_queue_.Get();
}
inline void RunPost_Request::_internal_set_protocol_queue(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.protocol_queue_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_protocol_queue() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.protocol_queue_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_protocol_queue() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.RunPost_Request.protocol_queue)
  if (!_internal_has_protocol_queue()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.protocol_queue_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_queue_.IsDefault()) {
    _impl_.protocol_queue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunPost_Request::set_allocated_protocol_queue(std::string* protocol_queue) {
  if (protocol_queue != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.protocol_queue_.SetAllocated(protocol_queue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_queue_.IsDefault()) {
    _impl_.protocol_queue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.RunPost_Request.protocol_queue)
}

// optional .com.wazuh.api.engine.test.DebugMode debug_mode = 4;
inline bool RunPost_Request::_internal_has_debug_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RunPost_Request::has_debug_mode() const {
  return _internal_has_debug_mode();
}
inline void RunPost_Request::clear_debug_mode() {
  _impl_.debug_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::com::wazuh::api::engine::test::DebugMode RunPost_Request::_internal_debug_mode() const {
  return static_cast< ::com::wazuh::api::engine::test::DebugMode >(_impl_.debug_mode_);
}
inline ::com::wazuh::api::engine::test::DebugMode RunPost_Request::debug_mode() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.debug_mode)
  return _internal_debug_mode();
}
inline void RunPost_Request::_internal_set_debug_mode(::com::wazuh::api::engine::test::DebugMode value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.debug_mode_ = value;
}
inline void RunPost_Request::set_debug_mode(::com::wazuh::api::engine::test::DebugMode value) {
  _internal_set_debug_mode(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.debug_mode)
}

// repeated string asset_trace = 5;
inline int RunPost_Request::_internal_asset_trace_size() const {
  return _impl_.asset_trace_.size();
}
inline int RunPost_Request::asset_trace_size() const {
  return _internal_asset_trace_size();
}
inline void RunPost_Request::clear_asset_trace() {
  _impl_.asset_trace_.Clear();
}
inline std::string* RunPost_Request::add_asset_trace() {
  std::string* _s = _internal_add_asset_trace();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
  return _s;
}
inline const std::string& RunPost_Request::_internal_asset_trace(int index) const {
  return _impl_.asset_trace_.Get(index);
}
inline const std::string& RunPost_Request::asset_trace(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
  return _internal_asset_trace(index);
}
inline std::string* RunPost_Request::mutable_asset_trace(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
  return _impl_.asset_trace_.Mutable(index);
}
inline void RunPost_Request::set_asset_trace(int index, const std::string& value) {
  _impl_.asset_trace_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline void RunPost_Request::set_asset_trace(int index, std::string&& value) {
  _impl_.asset_trace_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline void RunPost_Request::set_asset_trace(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.asset_trace_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline void RunPost_Request::set_asset_trace(int index, const char* value, size_t size) {
  _impl_.asset_trace_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline std::string* RunPost_Request::_internal_add_asset_trace() {
  return _impl_.asset_trace_.Add();
}
inline void RunPost_Request::add_asset_trace(const std::string& value) {
  _impl_.asset_trace_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline void RunPost_Request::add_asset_trace(std::string&& value) {
  _impl_.asset_trace_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline void RunPost_Request::add_asset_trace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.asset_trace_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline void RunPost_Request::add_asset_trace(const char* value, size_t size) {
  _impl_.asset_trace_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunPost_Request::asset_trace() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
  return _impl_.asset_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunPost_Request::mutable_asset_trace() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.test.RunPost_Request.asset_trace)
  return &_impl_.asset_trace_;
}

// optional string protocol_location = 6;
inline bool RunPost_Request::_internal_has_protocol_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RunPost_Request::has_protocol_location() const {
  return _internal_has_protocol_location();
}
inline void RunPost_Request::clear_protocol_location() {
  _impl_.protocol_location_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RunPost_Request::protocol_location() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.protocol_location)
  return _internal_protocol_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_protocol_location(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.protocol_location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.protocol_location)
}
inline std::string* RunPost_Request::mutable_protocol_location() {
  std::string* _s = _internal_mutable_protocol_location();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Request.protocol_location)
  return _s;
}
inline const std::string& RunPost_Request::_internal_protocol_location() const {
  return _impl_.protocol_location_.Get();
}
inline void RunPost_Request::_internal_set_protocol_location(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.protocol_location_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_protocol_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.protocol_location_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_protocol_location() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.RunPost_Request.protocol_location)
  if (!_internal_has_protocol_location()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.protocol_location_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_location_.IsDefault()) {
    _impl_.protocol_location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunPost_Request::set_allocated_protocol_location(std::string* protocol_location) {
  if (protocol_location != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.protocol_location_.SetAllocated(protocol_location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_location_.IsDefault()) {
    _impl_.protocol_location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.RunPost_Request.protocol_location)
}

// repeated string namespaces = 7;
inline int RunPost_Request::_internal_namespaces_size() const {
  return _impl_.namespaces_.size();
}
inline int RunPost_Request::namespaces_size() const {
  return _internal_namespaces_size();
}
inline void RunPost_Request::clear_namespaces() {
  _impl_.namespaces_.Clear();
}
inline std::string* RunPost_Request::add_namespaces() {
  std::string* _s = _internal_add_namespaces();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.test.RunPost_Request.namespaces)
  return _s;
}
inline const std::string& RunPost_Request::_internal_namespaces(int index) const {
  return _impl_.namespaces_.Get(index);
}
inline const std::string& RunPost_Request::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Request.namespaces)
  return _internal_namespaces(index);
}
inline std::string* RunPost_Request::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Request.namespaces)
  return _impl_.namespaces_.Mutable(index);
}
inline void RunPost_Request::set_namespaces(int index, const std::string& value) {
  _impl_.namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline void RunPost_Request::set_namespaces(int index, std::string&& value) {
  _impl_.namespaces_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline void RunPost_Request::set_namespaces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline void RunPost_Request::set_namespaces(int index, const char* value, size_t size) {
  _impl_.namespaces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline std::string* RunPost_Request::_internal_add_namespaces() {
  return _impl_.namespaces_.Add();
}
inline void RunPost_Request::add_namespaces(const std::string& value) {
  _impl_.namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline void RunPost_Request::add_namespaces(std::string&& value) {
  _impl_.namespaces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline void RunPost_Request::add_namespaces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline void RunPost_Request::add_namespaces(const char* value, size_t size) {
  _impl_.namespaces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.test.RunPost_Request.namespaces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunPost_Request::namespaces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.test.RunPost_Request.namespaces)
  return _impl_.namespaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunPost_Request::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.test.RunPost_Request.namespaces)
  return &_impl_.namespaces_;
}

// -------------------------------------------------------------------

// RunPost_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void RunPost_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus RunPost_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus RunPost_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Response.status)
  return _internal_status();
}
inline void RunPost_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void RunPost_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Response.status)
}

// optional string error = 2;
inline bool RunPost_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RunPost_Response::has_error() const {
  return _internal_has_error();
}
inline void RunPost_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RunPost_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.RunPost_Response.error)
}
inline std::string* RunPost_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Response.error)
  return _s;
}
inline const std::string& RunPost_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RunPost_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.RunPost_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunPost_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.RunPost_Response.error)
}

// optional .com.wazuh.api.engine.test.Run run = 3;
inline bool RunPost_Response::_internal_has_run() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_ != nullptr);
  return value;
}
inline bool RunPost_Response::has_run() const {
  return _internal_has_run();
}
inline void RunPost_Response::clear_run() {
  if (_impl_.run_ != nullptr) _impl_.run_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::test::Run& RunPost_Response::_internal_run() const {
  const ::com::wazuh::api::engine::test::Run* p = _impl_.run_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::test::Run&>(
      ::com::wazuh::api::engine::test::_Run_default_instance_);
}
inline const ::com::wazuh::api::engine::test::Run& RunPost_Response::run() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.RunPost_Response.run)
  return _internal_run();
}
inline void RunPost_Response::unsafe_arena_set_allocated_run(
    ::com::wazuh::api::engine::test::Run* run) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_);
  }
  _impl_.run_ = run;
  if (run) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.RunPost_Response.run)
}
inline ::com::wazuh::api::engine::test::Run* RunPost_Response::release_run() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::test::Run* temp = _impl_.run_;
  _impl_.run_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::test::Run* RunPost_Response::unsafe_arena_release_run() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.RunPost_Response.run)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::test::Run* temp = _impl_.run_;
  _impl_.run_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::test::Run* RunPost_Response::_internal_mutable_run() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.run_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::test::Run>(GetArenaForAllocation());
    _impl_.run_ = p;
  }
  return _impl_.run_;
}
inline ::com::wazuh::api::engine::test::Run* RunPost_Response::mutable_run() {
  ::com::wazuh::api::engine::test::Run* _msg = _internal_mutable_run();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.RunPost_Response.run)
  return _msg;
}
inline void RunPost_Response::set_allocated_run(::com::wazuh::api::engine::test::Run* run) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.run_;
  }
  if (run) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(run);
    if (message_arena != submessage_arena) {
      run = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.run_ = run;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.RunPost_Response.run)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::wazuh::api::engine::test::DebugMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::test::DebugMode>() {
  return ::com::wazuh::api::engine::test::DebugMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
