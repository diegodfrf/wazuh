syntax = "proto3";

import "engine.proto";
import "google/protobuf/struct.proto"; // For Value

package com.wazuh.api.engine.test;

/* Client-facing representation of a Session exposed in APIs */
message Session
{
    string name = 1;          // test session name
    uint32 id = 2;            // test session id
    uint32 creation_date = 3; // test session creation date
    string policy = 4;        // test policy name
    string filter = 5;        // test filter name
    string route = 6;         // test route name
    uint32 lifespan = 7;      // test session lifespan
    string description = 8;   // test session description
}

/* Client-facing representation of a test run in APIs */
message Run
{
    message AssetTrace
    {
        string asset = 1;           // Asset name
        bool success = 2;           // If the asset was successfully decoded
        repeated string traces = 3; // Traces of the asset
    }
    google.protobuf.Value output = 1;     // test output
    repeated AssetTrace asset_traces = 2; // Asset traces
}

enum DebugMode
{
    OUTPUT_ONLY = 0;       // Only the decoders that were able to decode the event will be seen
    OUTPUT_AND_TRACES = 1; // Will see all the decoders through which the event happened and also its result
    OUTPUT_AND_TRACES_WITH_DETAILS = 2; // Will see all the decoders through which the event happened with their
                                        // respective results and extra information that explains that result
}

/***************************************************
 * Get a session's data from the session manager
 *
 * command: test.session/get
 **************************************************/
message SessionGet_Request
{
    optional string name = 1; // test session name
}

message SessionGet_Response
{
    ReturnStatus status = 1;      // Status of the query
    optional string error = 2;    // Error message if status is ERROR
    optional Session session = 3; // Session data
}

/***************************************************
 * Create a new session
 *
 * command: test.session/post
 **************************************************/
message SessionPost_Request
{
    optional string name = 1;        // test session name
    optional string policy = 2;      // test policy name
    optional uint32 lifespan = 3;    // test session lifespan
    optional string description = 4; // test session description
}

message SessionPost_Response
{
    optional string error = 1; // Error message if status is ERROR
}
// GenericStatus_Response status; // Status of the query

/***************************************************
 * Get the active sessions list
 *
 * command: test.sessions/get
 **************************************************/
message SessionsGet_Request {}

message SessionsGet_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    repeated string list = 3;  // test sessions list
}

/***************************************************
 * Delete a session
 *
 * command: test.session/delete
 **************************************************/
message SessionsDelete_Request
{
    optional string name = 1; // test session name
    bool delete_all = 2;      // option to delete all the sessions
}

message SessionsDelete_Response
{
    optional string error = 1; // Error message if status is ERROR
}
// GenericStatus_Response status; // Status of the query

/***************************************************
 * Run a test
 *
 * command: test.run/post
 **************************************************/
message RunPost_Request
{
    optional string name = 1;                 // Name of the session.
    optional google.protobuf.Value event = 2; // Event to be processed.
    optional string protocol_queue = 3;       // The protocol queue for the event.
    optional DebugMode debug_mode = 4; // Allows you to choose between obtaining only the output or the output plus the
                                       // traces with or without verbosity.
    repeated string asset_trace = 5;   // Asset of which you only want to have details
    optional string protocol_location = 6; // The protocol location for the event.
    repeated string namespaces = 7;        // Namespaces where are the assets to test
}

message RunPost_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    optional Run run = 3;      // Test run data
}
